[{"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/index.js":"1","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/App.js":"2","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Connect.js":"3","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Lobby.js":"4","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Fire.js":"5","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/RandomString.js":"6","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/CopyLink.js":"7"},{"size":153,"mtime":1609371355540,"results":"8","hashOfConfig":"9"},{"size":498,"mtime":1610821012302,"results":"10","hashOfConfig":"9"},{"size":4138,"mtime":1611664790364,"results":"11","hashOfConfig":"9"},{"size":6861,"mtime":1611666693230,"results":"12","hashOfConfig":"9"},{"size":583,"mtime":1610882629798,"results":"13","hashOfConfig":"9"},{"size":383,"mtime":1610454236088,"results":"14","hashOfConfig":"9"},{"size":1271,"mtime":1610821303152,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qsq0hv",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/index.js",[],["34","35"],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/App.js",[],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Connect.js",["36","37","38"],"import React, { useState, useEffect } from 'react';\nimport { Database } from \"./Fire.js\"\nimport getRandomString from \"./RandomString.js\"\nimport { Button, InputGroup, FormControl, Row, Container, Alert, Fade } from 'react-bootstrap'\n\nfunction Connect(props) {\n  const options = require(\"./Options.json\")\n  const [lobbyCode, setLobbyCode] = useState(\"\")\n  const [lobbyCodeError, setLobbyCodeError] = useState(false)\n  const [userID, setUserID] = useState(getRandomString(16))\n  const [waitingForServer, setWaitingForServer] = useState(false)\n  const [showContent, setShowContent] = useState(false)\n  const [name, setName] = useState(\"\")\n  const [inputName, setInputName] = useState(false)\n  const [nameError, setNameError] = useState(false)\n  useEffect(() => {\n    const linkCode = window.location.search.substring(1, 9)\n    if (linkCode) {\n      tryFirstContact(linkCode)\n    } else {\n      setShowContent(true)\n    }\n  }, [])\n  const tryUploadingName = () => {\n    if (name.trim().length < options.name.minLength) {\n      setNameError(true)\n    } else {\n      if (!waitingForServer) {\n        setWaitingForServer(true)\n        Database.ref(`lobbies/_${lobbyCode}`).once(\"value\", (snapshot) => {\n          if (snapshot.exists()) {\n            Database.ref(`lobbies/_${lobbyCode}/players/${userID}`).set({ id: userID, name: name, points: 0, timePressed: 0, pressed: false })\n            Database.ref(`lobbies/_${lobbyCode}/players/${userID}`).onDisconnect().remove();\n            connect(lobbyCode)\n          } else {\n            window.location.search = window.location.search\n          }\n        })\n      }\n    }\n  }\n  const connect = (key) => {\n    Database.ref(`lobbies/_${key}`).on(\"value\", (snapshot) => {\n      if (snapshot.exists()) {\n        props.setLobby({ server: snapshot.val(), local: { lobbyCode: key, userID: userID } })\n      } else {\n        props.setLobbyExists(false)\n      }\n    })\n  }\n  const tryFirstContact = (key) => {\n    if (!waitingForServer) {\n      setWaitingForServer(true)\n      Database.ref(`lobbies/_${key}`).once(\"value\", (snapshot) => {\n        if (snapshot.exists()) {\n          setLobbyCode(key)\n          setInputName(true)\n          setWaitingForServer(false)\n        } else {\n          setLobbyCodeError(true)\n          setWaitingForServer(false)\n        }\n        setShowContent(true)\n      })\n    }\n  }\n  const createLobby = () => {\n    if (!waitingForServer) {\n      setWaitingForServer(true)\n      const randomLobbyCode = getRandomString(8)\n      Database.ref(`lobbies/_${randomLobbyCode}`).set({\n        players: [],\n        hostID: userID,\n        kickAnnouncer: \"\"\n      }).then(() => {\n        Database.ref(`lobbies/_${randomLobbyCode}`).onDisconnect().remove();\n        connect(randomLobbyCode)\n      })\n    }\n  }\n  if (!showContent) {\n    return <></>\n  }\n  if (inputName) {\n    return (<>\n      <Container>\n        <Row className=\"d-flex justify-content-center\">\n          <InputGroup style={{ maxWidth: \"270px\" }} className=\"mt-5\">\n            <FormControl\n              placeholder=\"Team Name\"\n              onChange={(event) => { setNameError(false); setName(event.target.value) }}\n              maxLength={options.name.maxLength} />\n            <InputGroup.Append>\n              <Button\n                variant=\"outline-primary\"\n                onClick={tryUploadingName}>\n                Enter\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Row>\n        <Fade in={nameError}>\n          <Row className=\"d-flex justify-content-center\"><Alert className=\"mt-3\" variant=\"danger\">{`The name is too short. The minimum length is ${options.name.minLength} characters.`}</Alert></Row>\n        </Fade>\n      </Container>\n    </>)\n  }\n  return (\n    <center>\n      <h1 className=\"mt-3\">Game Show Buzzer</h1>\n      <Button\n        variant=\"primary\"\n        onClick={createLobby}\n        className=\"mt-4\">\n        Create a new lobby\n      </Button>\n      {lobbyCodeError && <Row className=\"d-flex justify-content-center\"><Alert className=\"mt-3\" variant=\"danger\">The challenge link is invalid.</Alert></Row>}\n    </center>\n  )\n}\n\nexport default Connect;\n","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Lobby.js",["39","40"],"import React, { useState, useEffect } from 'react'\nimport { Database } from \"./Fire.js\"\nimport CopyLink from \"./CopyLink.js\"\nimport { Button, Spinner, Nav, Table, Container, Row, Alert, ButtonGroup, Fade, DropdownButton, Dropdown, Col, Form } from 'react-bootstrap'\nimport { useTransition, animated } from \"react-spring\"\n\nconst kick = (lobbyCode, id) => {\n  Database.ref(`lobbies/_${lobbyCode}/kickAnnouncer`).set(id)\n}\n\nfunction Settings(props) {\n  return (\n    <DropdownButton id=\"dropdown-basic-button\" className=\"float-right mt-1 mr-1\" title={<i className=\"fas fa-cog\"></i>}>\n      <Dropdown.Item onClick={() => props.setAutoReset(!props.autoReset)}>Reset buzzers when adding points {props.autoReset ? <i className=\"far fa-toggle-on text-primary\"></i> : <i className=\"far fa-toggle-off text-primary\"></i>}</Dropdown.Item>\n    </DropdownButton>\n  )\n}\n\nfunction PlayerTable(data) {\n  const isHost = data.lobby.local.userID === data.lobby.server.hostID\n  const positionDict = {}\n  Object\n    .values(data.lobby.server.players)\n    .filter((e) => e.pressed)\n    .sort((a, b) => a.timePressed - b.timePressed)\n    .forEach((e, i) => positionDict[e.id] = i + 1)\n  const playerTransitions = useTransition(Object.values(data.lobby.server.players), item => item.id, {\n    config: { duration: 1000 },\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n  })\n  const getSettingsCell = (item) => {\n    return <td className=\"text-center\">\n      <ButtonGroup size=\"sm\">\n        <Button variant=\"primary\"\n          onClick={() => {\n            if (!data.serverWait && data.lobby.server.players[item.id]) {\n              data.setServerWait(true)\n              let updates = {}\n              if (data.autoReset) {\n                Object.values(data.lobby.server.players).forEach((e) => {\n                  updates[`lobbies/_${data.lobby.local.lobbyCode}/players/${e.id}/pressed`] = false\n                })\n              }\n              updates[`lobbies/_${data.lobby.local.lobbyCode}/players/${item.id}/points`] = item.points + 1\n              Database.ref().update(updates).then(() => data.setServerWait(false))\n            }\n          }}>\n          <i className=\"fas fa-plus\"></i>\n        </Button>\n        {\" \"}\n        <Button variant=\"primary\"\n          onClick={() => {\n            if (!data.serverWait && data.lobby.server.players[item.id]) {\n              data.setServerWait(true)\n              Database.ref(`lobbies/_${data.lobby.local.lobbyCode}/players/${item.id}/points`).set(item.points - 1).then(() => data.setServerWait(false))\n            }\n          }}>\n          <i className=\"fas fa-minus\"></i>\n        </Button>\n        {\" \"}\n        <Button variant=\"primary\"\n          onClick={() => data.lobby.server.players[item.id] && kick(data.lobby.local.lobbyCode, item.id)}>\n          <i className=\"fas fa-users-slash\"></i>\n        </Button>\n      </ButtonGroup>\n    </td>\n  }\n  const maxScore = Object.values(data.lobby.server.players)\n    .reduce((acc, cur) => cur.points > acc ? cur.points : acc, -Infinity)\n  const rows = playerTransitions.map(({ item, props, key }, i) => {\n    return <animated.tr key={key} style={data.lobby.local.userID === item.id ? { ...props, backgroundColor: \"rgb(208, 233, 193)\" } : { ...props }}>\n      <td>{item.pressed && positionDict[item.id]}</td>\n      <td>{item.name}</td>\n      <td>{maxScore === item.points ? `${item.points} 🥇` : `${item.points} 🥈`}</td>\n      {isHost && getSettingsCell(item)}\n    </animated.tr>\n  })\n  return <Container>\n    <Row style={{ maxWidth: \"400px\" }} className=\"d-flex justify-content-center\">\n      <Table striped bordered>\n        <thead>\n          <tr>\n            <th><i className=\"text-success fas fa-list-ol\"></i></th>\n            <th><i className=\"text-secondary fas fa-users\"></i></th>\n            <th><i className=\"text-warning fas fa-star\"></i></th>\n            {isHost && <th><i className=\"fas fa-users-cog\"></i></th>}\n          </tr>\n        </thead>\n        <tbody>\n          {rows}\n        </tbody>\n      </Table>\n    </Row>\n  </Container>\n}\n\nfunction Lobby(props) {\n  const [serverWait, setServerWait] = useState(false)\n  const [autoReset, setAutoReset] = useState(false)\n  const isHost = props.lobby.local.userID === props.lobby.server.hostID\n  useEffect(() => {\n    if (props.lobby.server.kickAnnouncer === props.lobby.local.userID) {\n      window.location.search = \"\"\n    }\n  }, [props.lobby.server.kickAnnouncer])\n  const resetPlayersPressed = () => {\n    if (props.lobby.server.players) {\n      let updates = {}\n      Object.values(props.lobby.server.players).forEach((e) => {\n        updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${e.id}/pressed`] = false\n      })\n      Database.ref().update(updates)\n    }\n  }\n  const tryBuzzerPress = () => {\n    if (!serverWait && props.lobbyExists && !props.lobby.server.players[props.lobby.local.userID].pressed) {\n      setServerWait(true)\n      let updates = {}\n      updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${props.lobby.local.userID}/timePressed`] = Date.now()\n      updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${props.lobby.local.userID}/pressed`] = true\n      Database.ref().update(updates).then(() => setServerWait(false))\n    }\n  }\n  const hasPressedBuzzer = () => !props.lobby.server.players[props.lobby.local.userID].pressed\n  const homeNav = (\n    <Nav activeKey=\"\" style={{ display: \"inline-block\" }}>\n      <Nav.Item>\n        <Nav.Link style={{ fontSize: \"22px\" }} href=\"/gsb\">Home</Nav.Link>\n      </Nav.Item>\n    </Nav>)\n  return (\n    <>\n      {isHost ? (\n        <Row>\n          <Col>\n            {homeNav}\n          </Col >\n          <Col>\n            <Settings autoReset={autoReset} setAutoReset={setAutoReset} />\n          </Col >\n        </Row >\n      ) : homeNav\n      }\n      <center>\n        {props.lobby.server.players ? (<>\n          {!isHost &&\n            <button\n              className={(hasPressedBuzzer() ? \"pressable\" : \"nonPressable\") + \" buzzer mb-4\"}\n              onClick={tryBuzzerPress}>\n            </button>}\n          <PlayerTable serverWait={serverWait} autoReset={autoReset} setServerWait={setServerWait} lobby={props.lobby} />\n          {isHost && <Button className=\"mb-5\" variant=\"secondary\" onClick={resetPlayersPressed}>Reset buzzers</Button>}\n          <Fade in={!props.lobbyExists}>\n            <Row className=\"d-flex justify-content-center\"><Alert className=\"mt-3\" variant=\"danger\">{isHost ? \"The lobby has expired.\" : \"The host has left the lobby.\"}</Alert></Row>\n          </Fade>\n        </>) : (<>\n          <h2>Waiting for players.</h2>\n          <Spinner className=\"mb-5\" animation=\"border\" variant=\"primary\" />\n        </>)}\n        {isHost && <CopyLink url={window.location.origin + window.location.pathname + \"?\" + props.lobby.local.lobbyCode} />}\n      </center>\n    </>\n  )\n}\nexport default Lobby;\n","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Fire.js",[],["41","42"],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/RandomString.js",[],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/CopyLink.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":10,"column":18,"nodeType":"49","messageId":"50","endLine":10,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":23,"column":6,"nodeType":"53","endLine":23,"endColumn":8,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":36,"column":38,"nodeType":"57","messageId":"58","endLine":36,"endColumn":60},{"ruleId":"47","severity":1,"message":"59","line":4,"column":112,"nodeType":"49","messageId":"50","endLine":4,"endColumn":116},{"ruleId":"51","severity":1,"message":"60","line":107,"column":6,"nodeType":"53","endLine":107,"endColumn":40,"suggestions":"61"},{"ruleId":"43","replacedBy":"62"},{"ruleId":"45","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'setUserID' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tryFirstContact'. Either include it or remove the dependency array.","ArrayExpression",["66"],"no-self-assign","'window.location.search' is assigned to itself.","MemberExpression","selfAssignment","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'props.lobby.local.userID'. Either include it or remove the dependency array.",["67"],["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [tryFirstContact]",{"range":"72","text":"73"},"Update the dependencies array to be: [props.lobby.local.userID, props.lobby.server.kickAnnouncer]",{"range":"74","text":"75"},[922,924],"[tryFirstContact]",[4393,4427],"[props.lobby.local.userID, props.lobby.server.kickAnnouncer]"]