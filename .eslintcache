[{"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/index.js":"1","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/App.js":"2","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Connect.js":"3","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Lobby.js":"4","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Fire.js":"5","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/RandomString.js":"6","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/CopyLink.js":"7"},{"size":153,"mtime":1609371355540,"results":"8","hashOfConfig":"9"},{"size":498,"mtime":1610821012302,"results":"10","hashOfConfig":"9"},{"size":4138,"mtime":1611954847513,"results":"11","hashOfConfig":"9"},{"size":7489,"mtime":1611952918095,"results":"12","hashOfConfig":"9"},{"size":583,"mtime":1610882629798,"results":"13","hashOfConfig":"9"},{"size":383,"mtime":1610454236088,"results":"14","hashOfConfig":"9"},{"size":1271,"mtime":1611736502723,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"4o7w7s",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/index.js",[],["32","33"],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/App.js",[],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Connect.js",["34","35","36"],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Lobby.js",["37","38","39","40","41","42"],"import React, { useState, useEffect } from 'react'\nimport { Database } from \"./Fire.js\"\nimport CopyLink from \"./CopyLink.js\"\nimport { Button, Spinner, Nav, Table, Container, Row, Alert, ButtonGroup, Fade, DropdownButton, Dropdown, Col, Form } from 'react-bootstrap'\nimport { useTransition, animated } from \"react-spring\"\n\nconst kick = (lobbyCode, id) => {\n  Database.ref(`lobbies/_${lobbyCode}/kickAnnouncer`).set(id)\n}\n\nfunction Settings(props) {\n  return (\n    <DropdownButton style={{ margin: 0, position: \"absolute\", top: \"0px\", right: \"7px\" }} id=\"dropdown-basic-button\" className=\"float-right mt-2\" title={<i className=\"fas fa-cog\"></i>}>\n      <Dropdown.Item onClick={() => props.setAutoReset(!props.autoReset)}>Reset buzzers when adding points {props.autoReset ? <i className=\"far fa-toggle-on text-primary\"></i> : <i className=\"far fa-toggle-off text-primary\"></i>}</Dropdown.Item>\n      {props.showURL && <Dropdown.Item><CopyLink url={props.url} /></Dropdown.Item>}\n    </DropdownButton>\n  )\n}\n\nfunction PlayerTable(data) {\n  const isHost = data.lobby.local.userID === data.lobby.server.hostID\n  const positionDict = {}\n  Object\n    .values(data.lobby.server.players)\n    .filter((e) => e.pressed)\n    .sort((a, b) => a.timePressed - b.timePressed)\n    .forEach((e, i) => positionDict[e.id] = i + 1)\n  const playerTransitions = useTransition(Object.values(data.lobby.server.players), item => item.id, {\n    config: { duration: 1000 },\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n  })\n  const getSettingsCell = (item) => {\n    return <td className=\"text-center\">\n      <ButtonGroup size=\"sm\">\n        <Button variant=\"primary\"\n          onClick={() => {\n            if (!data.serverWait && data.lobby.server.players[item.id]) {\n              data.setServerWait(true)\n              let updates = {}\n              if (data.autoReset) {\n                Object.values(data.lobby.server.players).forEach((e) => {\n                  updates[`lobbies/_${data.lobby.local.lobbyCode}/players/${e.id}/pressed`] = false\n                })\n              }\n              updates[`lobbies/_${data.lobby.local.lobbyCode}/players/${item.id}/points`] = item.points + 1\n              Database.ref().update(updates).then(() => data.setServerWait(false))\n            }\n          }}>\n          <i className=\"fas fa-plus\"></i>\n        </Button>\n        {\" \"}\n        <Button variant=\"primary\"\n          onClick={() => {\n            if (!data.serverWait && data.lobby.server.players[item.id]) {\n              data.setServerWait(true)\n              Database.ref(`lobbies/_${data.lobby.local.lobbyCode}/players/${item.id}/points`).set(item.points - 1).then(() => data.setServerWait(false))\n            }\n          }}>\n          <i className=\"fas fa-minus\"></i>\n        </Button>\n        {\" \"}\n        <Button variant=\"primary\"\n          onClick={() => data.lobby.server.players[item.id] && kick(data.lobby.local.lobbyCode, item.id)}>\n          <i className=\"fas fa-users-slash\"></i>\n        </Button>\n      </ButtonGroup>\n    </td>\n  }\n  let tiedFirst = false\n  const maxScore = Object.values(data.lobby.server.players)\n    .reduce((acc, cur) => {\n      if (cur.points > acc) {\n        tiedFirst = false\n        return cur.points\n      } else if (cur.points == acc) {\n        tiedFirst = true\n        return acc\n      } else {\n        return acc\n      }\n    }, -Infinity)\n  const getPointsField = (score) => {\n    if (score == maxScore) {\n      if (tiedFirst) {\n        return `${score}🤼‍♂️`\n      } else {\n        return `${score}🥇`\n      }\n    } else {\n      return score\n    }\n  }\n  const rows = playerTransitions.map(({ item, props, key }, i) => {\n    return <animated.tr key={key} style={props} className={data.lobby.local.userID === item.id ? \"table-active\" : \"\"}>\n      <td>{item.pressed && positionDict[item.id]}</td>\n      <td>{item.name}</td>\n      <td style={{ fontFamily: 'Roboto Mono' }}>{getPointsField(item.points)}</td>\n      {isHost && getSettingsCell(item)}\n    </animated.tr>\n  })\n  return <Row style={{ maxWidth: \"500px\", marginTop: isHost ? \"60px\" : \"20px\" }} className=\"justify-content-center \">\n    <Table bordered>\n      <thead className=\"thead-dark\">\n        <tr>\n          <th><i className=\"text-success fas fa-list-ol\"></i></th>\n          <th><i className=\"text-primary fas fa-users\"></i></th>\n          <th><i className=\"text-warning fas fa-star\"></i></th>\n          {isHost && <th><i className=\"fas fa-users-cog\"></i></th>}\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  </Row>\n}\n\nfunction Lobby(props) {\n  const [serverWait, setServerWait] = useState(false)\n  const [autoReset, setAutoReset] = useState(false)\n  const isHost = props.lobby.local.userID === props.lobby.server.hostID\n  useEffect(() => {\n    if (props.lobby.server.kickAnnouncer === props.lobby.local.userID) {\n      window.location.search = \"\"\n    }\n  }, [props.lobby.server.kickAnnouncer])\n  const resetPlayersPressed = () => {\n    if (props.lobby.server.players) {\n      let updates = {}\n      Object.values(props.lobby.server.players).forEach((e) => {\n        updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${e.id}/pressed`] = false\n      })\n      Database.ref().update(updates)\n    }\n  }\n  const tryBuzzerPress = () => {\n    if (!serverWait && props.lobbyExists && !props.lobby.server.players[props.lobby.local.userID].pressed) {\n      setServerWait(true)\n      let updates = {}\n      updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${props.lobby.local.userID}/timePressed`] = Date.now()\n      updates[`lobbies/_${props.lobby.local.lobbyCode}/players/${props.lobby.local.userID}/pressed`] = true\n      Database.ref().update(updates).then(() => setServerWait(false))\n    }\n  }\n  const hasPressedBuzzer = () => !props.lobby.server.players[props.lobby.local.userID].pressed\n  const homeNav = (\n    <Button\n      style={{ margin: 0, position: \"absolute\", top: \"0px\", left: \"7px\" }}\n      variant=\"primary\"\n      href=\"/gsb\"\n      className=\"mt-2\">\n      <i className=\"fas fa-home\"></i>\n    </Button>\n  )\n  const lobbyURL = window.location.origin + window.location.pathname + \"?\" + props.lobby.local.lobbyCode\n  return (<>\n    {isHost ? (\n      <>\n        {homeNav}\n        <Settings showURL={props.lobby.server.players} autoReset={autoReset} url={lobbyURL} setAutoReset={setAutoReset} />\n      </>\n    ) : homeNav\n    }\n    <Container>\n      <center>\n        {props.lobby.server.players ? (<>\n          {!isHost &&\n            <button\n              className={(hasPressedBuzzer() ? \"pressable\" : \"nonPressable\") + \" buzzer\"}\n              onClick={tryBuzzerPress}\n              style={{marginTop:\"20px\"}}>\n            </button>}\n          <PlayerTable serverWait={serverWait} autoReset={autoReset} setServerWait={setServerWait} lobby={props.lobby} />\n          {isHost && <Button variant=\"dark\" onClick={resetPlayersPressed}>Reset buzzers</Button>}\n          <Fade in={!props.lobbyExists}>\n            <Row className=\"d-flex justify-content-center\"><Alert className=\"mt-3\" variant=\"danger\">{isHost ? \"The lobby has expired.\" : \"The host has left the lobby.\"}</Alert></Row>\n          </Fade>\n        </>) : (<>\n          <h2 style={{ marginTop: \"55px\" }}>Waiting for players.</h2>\n          <Spinner className=\"mb-5\" animation=\"border\" variant=\"primary\" />\n        </>)}\n        {!props.lobby.server.players && <CopyLink url={lobbyURL} />}\n      </center>\n    </Container>\n  </>)\n}\nexport default Lobby;\n","/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/Fire.js",[],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/RandomString.js",[],"/Users/axelhojmark/Dropbox/CODE/REACT/gameshowbuzzer/src/components/CopyLink.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":10,"column":18,"nodeType":"49","messageId":"50","endLine":10,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":23,"column":6,"nodeType":"53","endLine":23,"endColumn":8,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":36,"column":38,"nodeType":"57","messageId":"58","endLine":36,"endColumn":60},{"ruleId":"47","severity":1,"message":"59","line":4,"column":27,"nodeType":"49","messageId":"50","endLine":4,"endColumn":30},{"ruleId":"47","severity":1,"message":"60","line":4,"column":107,"nodeType":"49","messageId":"50","endLine":4,"endColumn":110},{"ruleId":"47","severity":1,"message":"61","line":4,"column":112,"nodeType":"49","messageId":"50","endLine":4,"endColumn":116},{"ruleId":"62","severity":1,"message":"63","line":77,"column":29,"nodeType":"64","messageId":"65","endLine":77,"endColumn":31},{"ruleId":"62","severity":1,"message":"63","line":85,"column":15,"nodeType":"64","messageId":"65","endLine":85,"endColumn":17},{"ruleId":"51","severity":1,"message":"66","line":128,"column":6,"nodeType":"53","endLine":128,"endColumn":40,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'setUserID' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tryFirstContact'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-self-assign","'window.location.search' is assigned to itself.","MemberExpression","selfAssignment","'Nav' is defined but never used.","'Col' is defined but never used.","'Form' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.lobby.local.userID'. Either include it or remove the dependency array.",["71"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [tryFirstContact]",{"range":"76","text":"77"},"Update the dependencies array to be: [props.lobby.local.userID, props.lobby.server.kickAnnouncer]",{"range":"78","text":"79"},[922,924],"[tryFirstContact]",[4912,4946],"[props.lobby.local.userID, props.lobby.server.kickAnnouncer]"]